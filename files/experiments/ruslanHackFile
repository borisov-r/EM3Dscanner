radoslav@radoslav-linux:~$ sudo modprobe -r psmouse
[sudo] password for radoslav: 
radoslav@radoslav-linux:~$ sudo modprobe psmouse
radoslav@radoslav-linux:~$ python3.2
Python 3.2.2 (default, Sep  5 2011, 22:09:30) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 200*200*120
4800000
>>> 200*200*120*1200
5760000000
>>> 200*200*120*1200.0
5760000000.0
>>> "%f" % 200*200*120*1200
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
MemoryError
>>> "%f" % (200*200*120*1200)
'5760000000.000000'
>>> 200*200*1200
48000000
>>> f=open("my-file.bin", "rwb")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: must have exactly one of read/write/append mode
>>> f=open("my-file.bin", "wb")
>>> f.seek(10)
10
>>> f.write(0xff)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' does not support the buffer interface
>>> f.write(b"\xff")
1
>>> f.close()
>>> f=open("my-file.bin", "rb")
>>> f.tell()
0
>>> f.read()
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff'
>>> f.tell()
11
>>> f.seek(0)
0
>>> f.size()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: '_io.BufferedReader' object has no attribute 'size'
>>> f.length()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: '_io.BufferedReader' object has no attribute 'length'
>>> f.length
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: '_io.BufferedReader' object has no attribute 'length'
>>> len(f)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object of type '_io.BufferedReader' has no len()
>>> f.size
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: '_io.BufferedReader' object has no attribute 'size'
>>> import os; os.path.getsize('my-file.bin')
11
>>> f.status()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: '_io.BufferedReader' object has no attribute 'status'
>>> f.tell()
0
>>> f.read(8)
b'\x00\x00\x00\x00\x00\x00\x00\x00'
>>> f.seek(0)
0
>>> f.seek(2)
2
>>> f.read(8)
b'\x00\x00\x00\x00\x00\x00\x00\x00'
>>> f.tell()
10
>>> f.seek(2)
2
>>> f.read(9)
b'\x00\x00\x00\x00\x00\x00\x00\x00\xff'
>>> struct
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'struct' is not defined
>>> import struct
>>> struct.unpack('f', f.read(8))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
struct.error: unpack requires a bytes object of length 4
>>> struct.unpack('f', f.read(4))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
struct.error: unpack requires a bytes object of length 4
>>> f.seek(0)
0
>>> struct.unpack('f', f.read(4))
(0.0,)
>>> f.seek(0)
0
>>> struct.unpack('f', f.read(8))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
struct.error: unpack requires a bytes object of length 4
>>> struct.unpack('d', f.read(8))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
struct.error: unpack requires a bytes object of length 8
>>> f.seek(0)
0
>>> struct.unpack('d', f.read(8))
(0.0,)
>>> f.seek(0)
0
>>> struct.unpack('d', f.read(8))[0]
0.0
>>> struct.pack('d', 1.0)
b'\x00\x00\x00\x00\x00\x00\xf0?'
>>> f.close()
>>> f=open('my-file.bin', 'wb')
>>> f.write(struct.pack('d', 1.0))
8
>>> f.close()
>>> f=open('my-file.bin', 'rb')
>>> struct.unpack('d', f.read(8))[0]
1.0
>>> f.close()
>>> f=open('my-file.bin', 'r+b')
>>> f.tell()
0
>>> f.seek(8)
8
>>> f.write(struct.pack('d', 2.2))
8
>>> f.close()
>>> f=open('my-file.bin', 'r+b')
>>> struct.unpack('d', f.read(8))[0]
1.0
>>> struct.unpack('d', f.read(8))[0]
2.2
>>> f.close()
>>> f=open('my-file.bin', 'r+b')
>>> f.seek(16)
16
>>> f.write(struct.pack('d', -100.52))
8
>>> f.close()
>>> f=open('my-file.bin', 'r+b')
>>> struct.unpack('d', f.read(8))[0]
1.0
>>> struct.unpack('d', f.read(8))[0]
2.2
>>> struct.unpack('d', f.read(8))[0]
-100.52
>>> f.close()
>>> 
>>> def calcIndex(x, y, z, amp, idx, maxX, maxY, freqNum):
...   index = (z * maxY + y) * maxX + x
...   index *= freqNum * 64
...   index += freqNum * amp * 8
...   return index + idx * 8
... 
>>> calcIndex(0, 0, 1, 3, 100, 200, 200, 400)
1024010400
>>> 

